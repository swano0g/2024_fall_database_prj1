CREATE TABLE students (student_id INT, student_name CHAR(50) NOT NULL, PRIMARY KEY (student_id));
CREATE TABLE courses (course_id INT, course_name CHAR(50) NOT NULL, PRIMARY KEY (course_id));
CREATE TABLE enrollments (enrollment_id INT, student_id INT NOT NULL, course_id INT NOT NULL, enrollment_date DATE, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id), PRIMARY KEY (enrollment_id));


"""
Metadata follows the format below
{'column_order':    ['C1', 'C2', 'C3', 'C4'], 
    'columns':         {
                    'C1': {'data_type': 'INT', 'not_null': True}, 
                    'C2': {'data_type': 'INT', 'not_null': True}, 
                    'C3': {'data_type': 'INT', 'not_null': True}, 
                    'C4': {'data_type': 'DATE', 'not_null': False}}, 
    'primary_keys':    ['C1'], 
    'foreign_keys':    [
                    {'fk_columns': ['C2'], 'fk_ref_table': 'table_name', 'fk_ref_columns': ['C2']}, 
                    {'fk_columns': ['C3'], 'fk_ref_table': 'table_name', 'fk_ref_columns': ['C3']}], 
    'referenced_by':   [{'referenced_columns': ['C1'], 'referencing_table': 'OTHER_TABLE', 'referencing_column': ['OTHER_TABLE_COLUMN']}]
    }
"""


Message Type                                Message
SyntaxError                                 Syntax error
CreateTableSuccess(#tableName)              '#tableName' table is created
DuplicateColumnDefError                     Create table has failed: column definition is duplicated
DuplicatePrimaryKeyDefError                 Create table has failed: primary key definition is duplicated
ReferenceTypeError                          Create table has failed: foreign key references wrong type
ReferenceNonPrimaryKeyError                 Create table has failed: foreign key references non primary key column
ReferenceExistenceError                     Create table has failed: foreign key references non existing table or column
PrimaryKeyColumnDefError(#colName)          Create table has failed: cannot define non-existing column '#colName' as primary key
ForeignKeyColumnDefError(#colName)          Create table has failed: cannot define non-existing column '#colName' as foreign key
TableExistenceError                         Create table has failed: table with the same name already exists
CharLengthError                             Char length should be over 0
DropSuccess(#tableName)                     '#tableName' table is dropped
NoSuchTable(#commandName)                   (#commandName) has failed: no such table
DropReferencedTableError(#tableName)        Drop table has failed: '#tableName' is referenced by another table
InsertResult                                The row is inserted
SelectTableExistenceError(#tableName)       Select has failed: '#tableName' does not exist

ReferenceColumnCountError                   Create table has failed: number fk and ref_fk different



CREATE TABLE BOOKS (
 BOOK_ID INT,
 TITLE CHAR(50),
 AUTHOR_ID INT,
 PUBLISHER_ID INT, 
 PRICE INT,
 PUBLISHED_DATE DATE,
 PRIMARY KEY (BOOK_ID),
 FOREIGN KEY (AUTHOR_ID) REFERENCES AUTHORS (AUTHOR_ID),
 FOREIGN KEY (PUBLISHER_ID) REFERENCES PUBLISHERS (PUBLISHER_ID)
);

CREATE TABLE AUTHORS (
 AUTHOR_ID INT,
 NAME CHAR(50),
 COUNTRY CHAR(10),
 EMAIL CHAR(50),
 PRIMARY KEY (AUTHOR_ID)
);

CREATE TABLE PUBLISHERS (
 PUBLISHER_ID INT,
 NAME CHAR(50),
 COUNTRY CHAR(10),
 PRIMARY KEY (PUBLISHER_ID)
);


INSERT INTO AUTHORS (AUTHOR_ID, NAME, COUNTRY, EMAIL) VALUES (2, 'Emma Wilson', 'UK', 'emma@email.com'); 
INSERT INTO AUTHORS (AUTHOR_ID, NAME, COUNTRY, EMAIL) VALUES (3, 'David Lee', 'USA', 'david@email.com'); 
INSERT INTO AUTHORS (AUTHOR_ID, NAME, COUNTRY, EMAIL) VALUES (4, 'Marie Claire', 'FR', 'marie@email.com'); 
INSERT INTO AUTHORS (AUTHOR_ID, NAME, COUNTRY, EMAIL) VALUES (5, 'James Johnson', 'USA', NULL); 
INSERT INTO AUTHORS (AUTHOR_ID, NAME, COUNTRY, EMAIL) VALUES (6, 'Sarah Brown', 'UK', 'sarah@email.com'); 
INSERT INTO AUTHORS (AUTHOR_ID, NAME, COUNTRY, EMAIL) VALUES (7, 'Michael Chen', 'CN', 'michael@email.com'); 

INSERT INTO PUBLISHERS (PUBLISHER_ID, NAME, COUNTRY) VALUES (1, 'Global Books', 'USA'); 
INSERT INTO PUBLISHERS (PUBLISHER_ID, NAME, COUNTRY) VALUES (2, 'UK Publishing', 'UK'); 
INSERT INTO PUBLISHERS (PUBLISHER_ID, NAME, COUNTRY) VALUES (3, 'Euro Press', 'FR'); 
INSERT INTO PUBLISHERS (PUBLISHER_ID, NAME, COUNTRY) VALUES (4, 'Asia Books', 'CN'); 
INSERT INTO PUBLISHERS (PUBLISHER_ID, NAME, COUNTRY) VALUES (5, 'World Publishers', 'USA'); 

INSERT INTO BOOKS (BOOK_ID, TITLE, AUTHOR_ID, PUBLISHER_ID, PRICE, PUBLISHED_DATE) VALUES (1, 'Database Systems', 1, 1, 1500, 2023-01-15); 
INSERT INTO BOOKS (BOOK_ID, TITLE, AUTHOR_ID, PUBLISHER_ID, PRICE, PUBLISHED_DATE) VALUES (2, 'Python Programming', 1, 1, 2000, 2023-03-20); 
INSERT INTO BOOKS (BOOK_ID, TITLE, AUTHOR_ID, PUBLISHER_ID, PRICE, PUBLISHED_DATE) VALUES (3, 'Web Development', 2, 2, 1800, 2023-02-10); 
INSERT INTO BOOKS (BOOK_ID, TITLE, AUTHOR_ID, PUBLISHER_ID, PRICE, PUBLISHED_DATE) VALUES (4, 'AI Basics', 3, 1, 2500, 2023-04-05); 
INSERT INTO BOOKS (BOOK_ID, TITLE, AUTHOR_ID, PUBLISHER_ID, PRICE, PUBLISHED_DATE) VALUES (5, 'Machine Learning', 3, 1, 3000, 2023-05-20); 
INSERT INTO BOOKS (BOOK_ID, TITLE, AUTHOR_ID, PUBLISHER_ID, PRICE, PUBLISHED_DATE) VALUES (6, 'Data Structures', 4, 3, 1700, 2023-06-15); 
INSERT INTO BOOKS (BOOK_ID, TITLE, AUTHOR_ID, PUBLISHER_ID, PRICE, PUBLISHED_DATE) VALUES (7, 'Algorithm Design', 4, 3, 1900, 2023-07-01); 
INSERT INTO BOOKS (BOOK_ID, TITLE, AUTHOR_ID, PUBLISHER_ID, PRICE, PUBLISHED_DATE) VALUES (8, 'Network Security', 2, 2, 2200, 2023-08-10); 
INSERT INTO BOOKS (BOOK_ID, TITLE, AUTHOR_ID, PUBLISHER_ID, PRICE, PUBLISHED_DATE) VALUES (9, 'Cloud Computing', 5, 1, 2800, 2023-09-15); 
INSERT INTO BOOKS (BOOK_ID, TITLE, AUTHOR_ID, PUBLISHER_ID, PRICE, PUBLISHED_DATE) VALUES (10, 'Software Engineering', 6, 2, 2100, 2023-10-20); 
INSERT INTO BOOKS (BOOK_ID, TITLE, AUTHOR_ID, PUBLISHER_ID, PRICE, PUBLISHED_DATE) VALUES (11, 'Mobile Development', 7, 4, 1600, 2023-11-05); 
INSERT INTO BOOKS (BOOK_ID, TITLE, AUTHOR_ID, PUBLISHER_ID, PRICE, PUBLISHED_DATE) VALUES (12, 'Quantum Computing', NULL, 5, 3500, 2023-12-01); 
INSERT INTO BOOKS (BOOK_ID, TITLE, AUTHOR_ID, PUBLISHER_ID, PRICE, PUBLISHED_DATE) VALUES (13, 'Computer Graphics', 1, 1, 2300, 2024-01-10); 
INSERT INTO BOOKS (BOOK_ID, TITLE, AUTHOR_ID, PUBLISHER_ID, PRICE, PUBLISHED_DATE) VALUES (14, 'Operating Systems', 3, 5, 2600, 2024-02-15); 
INSERT INTO BOOKS (BOOK_ID, TITLE, AUTHOR_ID, PUBLISHER_ID, PRICE, PUBLISHED_DATE) VALUES (15, 'Cyber Security', NULL, 2, 2400, 2024-03-01); 


SELECT BOOKS.TITLE, AUTHORS.NAME, PUBLISHERS.NAME 
FROM BOOKS 
JOIN AUTHORS ON BOOKS.AUTHOR_ID = AUTHORS.AUTHOR_ID 
JOIN PUBLISHERS ON BOOKS.PUBLISHER_ID = PUBLISHERS.PUBLISHER_ID 
WHERE PUBLISHERS.COUNTRY = 'USA'; 

SELECT BOOKS.TITLE, AUTHORS.NAME, PUBLISHERS.NAME, BOOKS.PRICE 
FROM BOOKS 
JOIN AUTHORS ON BOOKS.AUTHOR_ID = AUTHORS.AUTHOR_ID 
JOIN PUBLISHERS ON BOOKS.PUBLISHER_ID = PUBLISHERS.PUBLISHER_ID 
WHERE BOOKS.PRICE > 2000 AND AUTHORS.COUNTRY = 'USA'  
AND BOOKS.PUBLISHED_DATE < 2024-01-01; 


-- 1. 기본 조인과 조건
SELECT BOOKS.TITLE, AUTHORS.NAME, BOOKS.PRICE 
FROM BOOKS  
JOIN AUTHORS ON BOOKS.AUTHOR_ID = AUTHORS.AUTHOR_ID  
WHERE BOOKS.PRICE > 2000;

기대 결과:
'AI Basics', 'David Lee', 2500
'Machine Learning', 'David Lee', 3000
'Network Security', 'Emma Wilson', 2200
'Cloud Computing', 'James Johnson', 2800
'Software Engineering', 'Sarah Brown', 2100
'Computer Graphics', 'John Smith', 2300
'Operating Systems', 'David Lee', 2600

-- 2. 3개 테이블 조인과 WHERE 조건
SELECT BOOKS.TITLE, AUTHORS.NAME, PUBLISHERS.NAME
FROM BOOKS
JOIN AUTHORS ON BOOKS.AUTHOR_ID = AUTHORS.AUTHOR_ID
JOIN PUBLISHERS ON BOOKS.PUBLISHER_ID = PUBLISHERS.PUBLISHER_ID
WHERE PUBLISHERS.COUNTRY = 'USA';

기대 결과:
'Database Systems', 'John Smith', 'Global Books'
'Python Programming', 'John Smith', 'Global Books'
'AI Basics', 'David Lee', 'Global Books'
'Machine Learning', 'David Lee', 'Global Books'
'Cloud Computing', 'James Johnson', 'Global Books'
'Computer Graphics', 'John Smith', 'Global Books'
'Operating Systems', 'David Lee', 'World Publishers'

-- 3. NULL 값이 있는 경우의 조인
SELECT BOOKS.TITLE, AUTHORS.NAME, BOOKS.PUBLISHED_DATE
FROM BOOKS
LEFT JOIN AUTHORS ON BOOKS.AUTHOR_ID = AUTHORS.AUTHOR_ID
WHERE BOOKS.PUBLISHED_DATE > 2023-12-01;

기대 결과:
'Computer Graphics', 'John Smith', 2024-01-10
'Operating Systems', 'David Lee', 2024-02-15
'Cyber Security', NULL, 2024-03-01

-- 4. 여러 조건이 있는 복잡한 쿼리
SELECT BOOKS.TITLE, AUTHORS.NAME, PUBLISHERS.NAME, BOOKS.PRICE
FROM BOOKS
JOIN AUTHORS ON BOOKS.AUTHOR_ID = AUTHORS.AUTHOR_ID
JOIN PUBLISHERS ON BOOKS.PUBLISHER_ID = PUBLISHERS.PUBLISHER_ID
WHERE BOOKS.PRICE > 2000 AND AUTHORS.COUNTRY = 'USA' 
AND BOOKS.PUBLISHED_DATE < 2024-01-01;

기대 결과:
'AI Basics', 'David Lee', 'Global Books', 2500
'Machine Learning', 'David Lee', 'Global Books', 3000
'Cloud Computing', 'James Johnson', 'Global Books', 2800


-- 1. 동일한 이름의 컬럼이 여러 테이블에 있는데 테이블명 미지정
SELECT TITLE, NAME, COUNTRY
FROM BOOKS
JOIN AUTHORS ON BOOKS.AUTHOR_ID = AUTHORS.AUTHOR_ID
JOIN PUBLISHERS ON BOOKS.PUBLISHER_ID = PUBLISHERS.PUBLISHER_ID;

-- 2. JOIN 조건에서 모호한 컬럼 참조 
SELECT BOOKS.TITLE, AUTHORS.NAME
FROM BOOKS
JOIN AUTHORS ON AUTHOR_ID = AUTHOR_ID;

-- 3. WHERE 절에서 모호한 컬럼 사용
SELECT BOOKS.TITLE, AUTHORS.NAME, PUBLISHERS.NAME
FROM BOOKS
JOIN AUTHORS ON BOOKS.AUTHOR_ID = AUTHORS.AUTHOR_ID
JOIN PUBLISHERS ON BOOKS.PUBLISHER_ID = PUBLISHERS.PUBLISHER_ID
WHERE COUNTRY = 'USA';

-- 4. 두 테이블의 NAME을 모두 가져오려할 때 컬럼명 충돌
SELECT BOOKS.TITLE, NAME
FROM BOOKS
JOIN AUTHORS ON BOOKS.AUTHOR_ID = AUTHORS.AUTHOR_ID
JOIN PUBLISHERS ON BOOKS.PUBLISHER_ID = PUBLISHERS.PUBLISHER_ID;



-- 1. 존재하지 않는 테이블 참조
SELECT BOOKS.TITLE, CUSTOMERS.NAME
FROM BOOKS
JOIN CUSTOMERS ON BOOKS.CUSTOMER_ID = CUSTOMERS.ID;

-- 2. 존재하지 않는 컬럼 참조
SELECT BOOKS.TITLE, AUTHORS.AGE, AUTHORS.NAME
FROM BOOKS
JOIN AUTHORS ON BOOKS.AUTHOR_ID = AUTHORS.AUTHOR_ID;

-- 3. 존재하지 않는 컬럼으로 JOIN 시도
SELECT BOOKS.TITLE, AUTHORS.NAME
FROM BOOKS
JOIN AUTHORS ON BOOKS.ISBN = AUTHORS.BOOK_ID;

-- 4. WHERE 절에서 존재하지 않는 컬럼 사용
SELECT BOOKS.TITLE, AUTHORS.NAME
FROM BOOKS
JOIN AUTHORS ON BOOKS.AUTHOR_ID = AUTHORS.AUTHOR_ID
WHERE BOOKS.RATING > 4;

-- 5. 존재하지 않는 테이블의 컬럼을 SELECT
SELECT BOOKS.TITLE, REVIEWS.SCORE, AUTHORS.NAME
FROM BOOKS
JOIN AUTHORS ON BOOKS.AUTHOR_ID = AUTHORS.AUTHOR_ID;